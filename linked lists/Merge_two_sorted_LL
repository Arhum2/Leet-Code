# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
    
    def __repr__(self):
        """Helper method to display the linked list"""
        result = []
        current = self
        while current:
            result.append(str(current.val))
            current = current.next
        return " -> ".join(result)

from typing import Optional

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        dummy = ListNode()
        tail = dummy

        while list1 and list2:
            if list1.val < list2.val:
                tail.next = list1
                list1 = list1.next

            else:
                tail.next = list2
                list2 = list2.next
            
            tail = tail.next

        if list1:
            tail.next = list1
        elif list2:
            tail.next = list2
            
        return dummy.next

# Helper function to create linked list from array
def create_linked_list(arr):
    if not arr:
        return None
    head = ListNode(arr[0])
    current = head
    for val in arr[1:]:
        current.next = ListNode(val)
        current = current.next
    return head

# Helper function to convert linked list to array for easy comparison
def linked_list_to_array(head):
    result = []
    current = head
    while current:
        result.append(current.val)
        current = current.next
    return result

# Test cases
if __name__ == "__main__":
    solution = Solution()
    
    # Test case 1: Both lists have elements
    list1 = create_linked_list([1, 2, 4])
    list2 = create_linked_list([1, 3, 4])
    result = solution.mergeTwoLists(list1, list2)
    assert linked_list_to_array(result) == [1, 1, 2, 3, 4, 4]
    print("Test 1 passed: [1,2,4] + [1,3,4] = [1,1,2,3,4,4]")
    
    # Test case 2: One empty list
    list1 = create_linked_list([])
    list2 = create_linked_list([0])
    result = solution.mergeTwoLists(list1, list2)
    assert linked_list_to_array(result) == [0]
    print("Test 2 passed: [] + [0] = [0]")
    
    # Test case 3: Both empty lists
    list1 = create_linked_list([])
    list2 = create_linked_list([])
    result = solution.mergeTwoLists(list1, list2)
    assert linked_list_to_array(result) == []
    print("Test 3 passed: [] + [] = []")
    
    # Test case 4: Different lengths
    list1 = create_linked_list([1, 5, 10])
    list2 = create_linked_list([2, 3, 4, 6, 7, 8, 9])
    result = solution.mergeTwoLists(list1, list2)
    assert linked_list_to_array(result) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    print("Test 4 passed: [1,5,10] + [2,3,4,6,7,8,9] = [1,2,3,4,5,6,7,8,9,10]")
    
    # Test case 5: One list is None
    list1 = None
    list2 = create_linked_list([1, 2, 3])
    result = solution.mergeTwoLists(list1, list2)
    assert linked_list_to_array(result) == [1, 2, 3]
    print("Test 5 passed: None + [1,2,3] = [1,2,3]")
    
    print("\nAll test cases passed!")